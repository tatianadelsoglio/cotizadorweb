{"version":3,"sources":["components/Header.js","helper.js","components/Formulario.js","components/Resumen.js","components/Resultado.js","components/Spinner.js","App.js","serviceWorker.js","index.js"],"names":["ContenedorHeader","styled","header","TextoHeader","h1","Header","titulo","primerMayuscula","texto","charAt","toUpperCase","slice","Campo","div","Label","label","Select","select","InputRadio","input","Boton","button","Error","Formulario","guardarResumen","guardarCargando","useState","marca","year","plan","datos","guardarDatos","error","guardarError","obtenerInformacion","e","target","name","value","onSubmit","preventDefault","trim","resultado","diferencia","Date","getFullYear","obtenerDiferenciaYear","incremento","calcularMarca","incrementoPlan","obtenerPlan","parseFloat","toFixed","setTimeout","cotizacion","Number","onChange","type","checked","ContenedorResumen","Resumen","Mensaje","p","ResultadoCotizacion","TextoCotizacion","Resultado","TransitionGroup","component","className","CSSTransition","classNames","timeout","enter","exit","Spinner","Contenedor","ContenedorFormulario","App","resumen","cargando","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8a7ee25c.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from '@emotion/styled';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ContenedorHeader = styled.header`\r\n    background-color: #26C6DA;\r\n    padding: 10px;\r\n    font-weight: bold;\r\n    color: #FFFFFF;\r\n`;\r\n\r\nconst TextoHeader = styled.h1`\r\n    font-size: 2rem;\r\n    margin:0;\r\n    font-family: 'Slabo 27px', serif;\r\n    text-align: center;\r\n`\r\n\r\nconst Header = ({titulo}) => {\r\n    return ( \r\n        <ContenedorHeader>\r\n            <TextoHeader>{titulo}</TextoHeader>\r\n        </ContenedorHeader>\r\n     );\r\n}\r\n\r\nHeader.propTypes = {\r\n    titulo: PropTypes.string.isRequired\r\n}\r\n \r\nexport default Header;","\r\n// obtiene la diferencia de años\r\nexport function obtenerDiferenciaYear(year) {\r\n    return new Date().getFullYear() - year;\r\n}\r\n\r\n// calcula el total a pagar segun la marca\r\nexport function calcularMarca(marca) {\r\n    let incremento;\r\n\r\n    switch(marca) {\r\n        case 'europeo':\r\n            incremento = 1.30;\r\n            break;\r\n        case 'americano':\r\n            incremento = 1.15;\r\n            break;\r\n        case 'asiatico':\r\n            incremento = 1.05;\r\n            break\r\n        default:\r\n            break;\r\n    }\r\n\r\n    return incremento;\r\n}\r\n\r\n// Calcula el tipo de seguro\r\nexport function obtenerPlan( plan ) {\r\n    return (plan === 'basico') ? 1.20 : 1.50;\r\n}\r\n\r\n// Muestra la primer letra mayuscula\r\nexport function primerMayuscula( texto) {\r\n    return texto.charAt(0).toUpperCase() + texto.slice(1);\r\n}","import React, { useState } from 'react';\r\nimport styled from '@emotion/styled';\r\nimport PropTypes from 'prop-types';\r\nimport { obtenerDiferenciaYear, calcularMarca, obtenerPlan } from '../helper';\r\n\r\nconst Campo = styled.div`\r\n    display: flex;\r\n    margin-bottom: 1rem;\r\n    align-items: center;\r\n`;\r\nconst Label = styled.label`\r\n    flex: 0 0 100px;\r\n`;\r\nconst Select = styled.select`\r\n    display: block;\r\n    width: 100%;\r\n    padding: 1rem;\r\n    border: 1px solid #e1e1e1;\r\n    -webkit-appearance: none;\r\n`;\r\nconst InputRadio = styled.input`\r\n    margin: 0 1rem;\r\n`;\r\n\r\nconst Boton = styled.button`\r\n    background-color: #00838F;\r\n    font-size: 16px;\r\n    width: 100%;\r\n    padding: 1rem;\r\n    color: #fff;\r\n    text-transform: uppercase;\r\n    font-weight: bold;\r\n    border: none;\r\n    transition: background-color .3s ease;\r\n    margin-top: 2rem;\r\n\r\n    &:hover {\r\n        background-color: #26C6DA;\r\n        cursor: pointer;\r\n    }\r\n`;\r\n\r\nconst Error = styled.div`\r\n    background-color: red;\r\n    color: white;\r\n    padding: 1rem;\r\n    width:100%;\r\n    text-align: center;\r\n    margin-bottom: 2rem;\r\n`;\r\n\r\nconst Formulario = ({guardarResumen, guardarCargando}) => {\r\n\r\n    const [ datos, guardarDatos ] = useState({\r\n        marca: '',\r\n        year: '',\r\n        plan: ''\r\n    });\r\n    const [ error, guardarError ] = useState(false);\r\n\r\n    // extraer los valores del state\r\n    const { marca, year, plan } = datos;\r\n\r\n    // Leer los datos del formulario y colocarlos en el state\r\n    const obtenerInformacion = e => {\r\n        guardarDatos({\r\n            ...datos,\r\n            [e.target.name] : e.target.value\r\n        })\r\n    }\r\n\r\n    // cuando el usuario presiona submit\r\n    const cotizarSeguro = e => {\r\n        e.preventDefault();\r\n\r\n        if(marca.trim() === '' || year.trim() === '' || plan.trim() === '') {\r\n            guardarError(true);\r\n            return;\r\n        }\r\n\r\n        guardarError(false);\r\n\r\n        // Una base de 2000\r\n        let resultado = 2000;\r\n\r\n        // obtener la diferencia de años\r\n        const diferencia = obtenerDiferenciaYear(year);\r\n\r\n        // por cada año hay que restar el 3%\r\n        resultado -= (( diferencia * 3 ) * resultado) / 100;\r\n\r\n        // Americano 15\r\n        // Asiatico 5%\r\n        // Europeo 30%\r\n        resultado = calcularMarca(marca) * resultado;\r\n\r\n        // Basíco aumenta 20%\r\n        // Completo 50%\r\n        const incrementoPlan = obtenerPlan(plan);\r\n        resultado = parseFloat( incrementoPlan * resultado ).toFixed(2);\r\n\r\n        guardarCargando(true);\r\n\r\n        setTimeout(() => {\r\n\r\n            // Elimina el spinner\r\n            guardarCargando(false);\r\n\r\n            // pasa la información al componente principal\r\n            guardarResumen({\r\n                cotizacion: Number(resultado),\r\n                datos\r\n            });\r\n        }, 3000);\r\n\r\n\r\n\r\n    }\r\n\r\n    return ( \r\n        <form\r\n            onSubmit={cotizarSeguro}\r\n        >\r\n            { error ? <Error>Todos los campos son obligatorios</Error>  : null }\r\n\r\n            <Campo>\r\n                <Label>Marca</Label>\r\n                <Select\r\n                    name=\"marca\"\r\n                    value={marca}\r\n                    onChange={obtenerInformacion}\r\n                >\r\n                    <option value=\"\">-- Seleccione --</option>\r\n                    <option value=\"americano\">Americano</option>\r\n                    <option value=\"europeo\">Europeo</option>\r\n                    <option value=\"asiatico\">Asiatico</option>\r\n                </Select>\r\n            </Campo>\r\n\r\n            <Campo>\r\n                <Label>Año</Label>\r\n                <Select\r\n                    name=\"year\"\r\n                    value={year}\r\n                    onChange={obtenerInformacion}\r\n                >\r\n                    <option value=\"\">-- Seleccione --</option>\r\n                    <option value=\"2021\">2021</option>\r\n                    <option value=\"2020\">2020</option>\r\n                    <option value=\"2019\">2019</option>\r\n                    <option value=\"2018\">2018</option>\r\n                    <option value=\"2017\">2017</option>\r\n                    <option value=\"2016\">2016</option>\r\n                    <option value=\"2015\">2015</option>\r\n                    <option value=\"2014\">2014</option>\r\n                    <option value=\"2013\">2013</option>\r\n                    <option value=\"2012\">2012</option>\r\n                </Select>\r\n            </Campo>\r\n\r\n            <Campo>\r\n                <Label>Plan</Label>\r\n                <InputRadio \r\n                    type=\"radio\"\r\n                    name=\"plan\"\r\n                    value=\"basico\"\r\n                    checked={plan === \"basico\"}\r\n                    onChange={obtenerInformacion}\r\n                /> Básico\r\n\r\n                <InputRadio \r\n                    type=\"radio\"\r\n                    name=\"plan\"\r\n                    value=\"completo\"\r\n                    checked={plan === \"completo\"}\r\n                    onChange={obtenerInformacion}\r\n                /> Completo\r\n            </Campo>\r\n\r\n            <Boton type=\"submit\">Cotizar</Boton>\r\n        </form>\r\n\r\n     );\r\n}\r\n\r\nFormulario.propTypes = {\r\n    guardarResumen: PropTypes.func.isRequired,\r\n    guardarCargando: PropTypes.func.isRequired\r\n}\r\n \r\nexport default Formulario;","import React from 'react';\r\nimport styled from '@emotion/styled';\r\nimport PropTypes from 'prop-types';\r\nimport { primerMayuscula } from '../helper';\r\n\r\nconst ContenedorResumen = styled.div`\r\n    padding: 1rem;\r\n    text-align: center;\r\n    background-color: #00838F;\r\n    color: #FFF;\r\n    margin-top: 1rem;\r\n`;\r\n\r\nconst Resumen = ({datos}) => {\r\n\r\n    // extraer de datos\r\n    const {marca, year, plan} = datos;\r\n\r\n    if(marca === '' || year === '' || plan === '' ) return null;\r\n\r\n    return ( \r\n        <ContenedorResumen>\r\n            <h2>Resumen de Cotización</h2>\r\n            <ul>\r\n                <li>Marca: { primerMayuscula(marca) } </li>\r\n                <li>Plan: {primerMayuscula(plan)} </li>\r\n                <li>Año del Auto: {year} </li>\r\n            </ul>\r\n        </ContenedorResumen>\r\n     );\r\n}\r\n\r\nResumen.propTypes = {\r\n    datos: PropTypes.object.isRequired\r\n}\r\n \r\nexport default Resumen;","import React from 'react';\r\nimport styled from '@emotion/styled';\r\nimport { TransitionGroup, CSSTransition  } from 'react-transition-group';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Mensaje = styled.p`\r\n    background-color: rgb(127, 224, 237);\r\n    margin-top: 2rem;\r\n    padding: 1rem;\r\n    text-align: center;\r\n`;\r\n\r\nconst ResultadoCotizacion = styled.div`\r\n    text-align: center;\r\n    padding: .5rem;\r\n    border: 1px solid #26C6DA;\r\n    background-color:  rgb(127, 224, 237);\r\n    margin-top: 1rem;\r\n    position: relative;\r\n`;\r\n\r\nconst TextoCotizacion = styled.p`\r\n    color: #00838F;\r\n    padding: 1rem;\r\n    text-transform: uppercase;\r\n    font-weight:bold;\r\n    margin: 0;\r\n`;\r\n\r\n\r\nconst Resultado = ({cotizacion}) => {\r\n\r\n    return (\r\n        (cotizacion === 0) \r\n            ? <Mensaje>Elige marca, año y tipo de seguro</Mensaje> \r\n            :  \r\n                (\r\n                    <ResultadoCotizacion>\r\n                        <TransitionGroup\r\n                            component=\"span\"\r\n                            className=\"resultado\"\r\n                        >\r\n                            <CSSTransition\r\n                                classNames=\"resultado\"\r\n                                key={cotizacion}\r\n                                timeout={{ enter: 500, exit: 500}}\r\n                            >\r\n                                <TextoCotizacion>El total es: $ <span> {cotizacion} </span>  </TextoCotizacion>\r\n                            </CSSTransition>\r\n                        </TransitionGroup>\r\n                    </ResultadoCotizacion>\r\n                )\r\n    )\r\n}\r\n \r\nResultado.propTypes = {\r\n    cotizacion: PropTypes.number.isRequired\r\n}\r\n\r\n\r\nexport default Resultado;","import React from 'react';\r\nimport './Spinner.css';\r\n\r\nconst Spinner = () => {\r\n    return ( \r\n\r\n        <div className=\"sk-circle\">\r\n            <div className=\"sk-circle1 sk-child\"></div>\r\n            <div className=\"sk-circle2 sk-child\"></div>\r\n            <div className=\"sk-circle3 sk-child\"></div>\r\n            <div className=\"sk-circle4 sk-child\"></div>\r\n            <div className=\"sk-circle5 sk-child\"></div>\r\n            <div className=\"sk-circle6 sk-child\"></div>\r\n            <div className=\"sk-circle7 sk-child\"></div>\r\n            <div className=\"sk-circle8 sk-child\"></div>\r\n            <div className=\"sk-circle9 sk-child\"></div>\r\n            <div className=\"sk-circle10 sk-child\"></div>\r\n            <div className=\"sk-circle11 sk-child\"></div>\r\n            <div className=\"sk-circle12 sk-child\"></div>\r\n        </div>\r\n\r\n     );\r\n}\r\n \r\nexport default Spinner;","import React, { useState } from 'react';\r\nimport Header from './components/Header';\r\nimport Formulario from './components/Formulario';\r\nimport Resumen from './components/Resumen';\r\nimport Resultado from './components/Resultado';\r\nimport Spinner from './components/Spinner';\r\n\r\nimport styled from '@emotion/styled';\r\n\r\nconst Contenedor = styled.div`\r\n  max-width: 600px;\r\n  margin: 0 auto;\r\n`;\r\nconst ContenedorFormulario = styled.div`\r\n  background-color: #FFF;\r\n  padding: 3rem;\r\n`\r\n\r\nfunction App() {\r\n\r\n  const [ resumen, guardarResumen] = useState({\r\n      cotizacion: 0,\r\n      datos: {\r\n        marca: '',\r\n        year: '',\r\n        plan: ''\r\n      }\r\n  });\r\n\r\n  const [ cargando, guardarCargando] = useState(false);\r\n\r\n  // extraer datos\r\n  const { cotizacion, datos } = resumen;\r\n\r\n  return (\r\n    <Contenedor>\r\n        <Header \r\n          titulo='Cotizador de Seguros'\r\n        />\r\n\r\n        <ContenedorFormulario>\r\n            <Formulario \r\n              guardarResumen={guardarResumen}\r\n              guardarCargando={guardarCargando}\r\n            />\r\n\r\n            { cargando ? <Spinner /> : null }\r\n            \r\n            <Resumen \r\n              datos={datos}\r\n            />\r\n\r\n            { !cargando  ?\r\n                <Resultado \r\n                  cotizacion={cotizacion}\r\n                /> : null\r\n            }\r\n            \r\n        </ContenedorFormulario>\r\n    </Contenedor>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}